# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  email: String
  password: PasswordState
  admin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  admin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  admin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  email: String
  password: String
  admin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  admin: Boolean
}

type Session {
  id: ID!
  name: String
  start: DateTime
  end: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SessionWhereUniqueInput {
  id: ID
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IDFilter
  name: StringFilter
  start: DateTimeFilter
  end: DateTimeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SessionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  start: OrderDirection
  end: OrderDirection
}

input SessionUpdateInput {
  name: String
  start: DateTime
  end: DateTime
}

input SessionUpdateArgs {
  where: SessionWhereUniqueInput!
  data: SessionUpdateInput!
}

input SessionCreateInput {
  name: String
  start: DateTime
  end: DateTime
}

type Packet {
  id: ID!
  session: Session
  timestamp: DateTime
  host: String
  ip: String
  protocol: String
  method: String
  accept: String
  contentType: String
  userId: String
  lat: Float
  lon: Float
  clientLat: Float
  clientLon: Float
  country: String
  region: String
  city: String
  userAgent: String
  contentLength: Float
  responseTime: Float
}

input PacketWhereUniqueInput {
  id: ID
}

input PacketWhereInput {
  AND: [PacketWhereInput!]
  OR: [PacketWhereInput!]
  NOT: [PacketWhereInput!]
  id: IDFilter
  session: SessionWhereInput
  timestamp: DateTimeFilter
  host: StringFilter
  ip: StringFilter
  protocol: StringFilter
  method: StringFilter
  accept: StringFilter
  contentType: StringFilter
  userId: StringFilter
  lat: FloatNullableFilter
  lon: FloatNullableFilter
  clientLat: FloatNullableFilter
  clientLon: FloatNullableFilter
  country: StringFilter
  region: StringFilter
  city: StringFilter
  userAgent: StringFilter
  contentLength: FloatNullableFilter
  responseTime: FloatNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input PacketOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
  host: OrderDirection
  ip: OrderDirection
  protocol: OrderDirection
  method: OrderDirection
  accept: OrderDirection
  contentType: OrderDirection
  userId: OrderDirection
  lat: OrderDirection
  lon: OrderDirection
  clientLat: OrderDirection
  clientLon: OrderDirection
  country: OrderDirection
  region: OrderDirection
  city: OrderDirection
  userAgent: OrderDirection
  contentLength: OrderDirection
  responseTime: OrderDirection
}

input PacketUpdateInput {
  session: SessionRelateToOneForUpdateInput
  timestamp: DateTime
  host: String
  ip: String
  protocol: String
  method: String
  accept: String
  contentType: String
  userId: String
  lat: Float
  lon: Float
  clientLat: Float
  clientLon: Float
  country: String
  region: String
  city: String
  userAgent: String
  contentLength: Float
  responseTime: Float
}

input SessionRelateToOneForUpdateInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
  disconnect: Boolean
}

input PacketUpdateArgs {
  where: PacketWhereUniqueInput!
  data: PacketUpdateInput!
}

input PacketCreateInput {
  session: SessionRelateToOneForCreateInput
  timestamp: DateTime
  host: String
  ip: String
  protocol: String
  method: String
  accept: String
  contentType: String
  userId: String
  lat: Float
  lon: Float
  clientLat: Float
  clientLon: Float
  country: String
  region: String
  city: String
  userAgent: String
  contentLength: Float
  responseTime: Float
}

input SessionRelateToOneForCreateInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
}

type Domain {
  id: ID!
  name: String
  hits: Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input DomainWhereUniqueInput {
  id: ID
  name: String
}

input DomainWhereInput {
  AND: [DomainWhereInput!]
  OR: [DomainWhereInput!]
  NOT: [DomainWhereInput!]
  id: IDFilter
  name: StringFilter
  hits: IntNullableFilter
  tags: TagManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input DomainOrderByInput {
  id: OrderDirection
  name: OrderDirection
  hits: OrderDirection
}

input DomainUpdateInput {
  name: String
  hits: Int
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input DomainUpdateArgs {
  where: DomainWhereUniqueInput!
  data: DomainUpdateInput!
}

input DomainCreateInput {
  name: String
  hits: Int
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type MainDomain {
  id: ID!
  name: String
  domains(where: DomainWhereInput! = {}, orderBy: [DomainOrderByInput!]! = [], take: Int, skip: Int! = 0): [Domain!]
  domainsCount(where: DomainWhereInput! = {}): Int
}

input MainDomainWhereUniqueInput {
  id: ID
  name: String
}

input MainDomainWhereInput {
  AND: [MainDomainWhereInput!]
  OR: [MainDomainWhereInput!]
  NOT: [MainDomainWhereInput!]
  id: IDFilter
  name: StringFilter
  domains: DomainManyRelationFilter
}

input DomainManyRelationFilter {
  every: DomainWhereInput
  some: DomainWhereInput
  none: DomainWhereInput
}

input MainDomainOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input MainDomainUpdateInput {
  name: String
  domains: DomainRelateToManyForUpdateInput
}

input DomainRelateToManyForUpdateInput {
  disconnect: [DomainWhereUniqueInput!]
  set: [DomainWhereUniqueInput!]
  create: [DomainCreateInput!]
  connect: [DomainWhereUniqueInput!]
}

input MainDomainUpdateArgs {
  where: MainDomainWhereUniqueInput!
  data: MainDomainUpdateInput!
}

input MainDomainCreateInput {
  name: String
  domains: DomainRelateToManyForCreateInput
}

input DomainRelateToManyForCreateInput {
  create: [DomainCreateInput!]
  connect: [DomainWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  category: Category
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  category: CategoryWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  category: CategoryRelateToOneForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  category: CategoryRelateToOneForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Category {
  id: ID!
  name: String
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSession(data: SessionCreateInput!): Session
  createSessions(data: [SessionCreateInput!]!): [Session]
  updateSession(where: SessionWhereUniqueInput!, data: SessionUpdateInput!): Session
  updateSessions(data: [SessionUpdateArgs!]!): [Session]
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSessions(where: [SessionWhereUniqueInput!]!): [Session]
  createPacket(data: PacketCreateInput!): Packet
  createPackets(data: [PacketCreateInput!]!): [Packet]
  updatePacket(where: PacketWhereUniqueInput!, data: PacketUpdateInput!): Packet
  updatePackets(data: [PacketUpdateArgs!]!): [Packet]
  deletePacket(where: PacketWhereUniqueInput!): Packet
  deletePackets(where: [PacketWhereUniqueInput!]!): [Packet]
  createDomain(data: DomainCreateInput!): Domain
  createDomains(data: [DomainCreateInput!]!): [Domain]
  updateDomain(where: DomainWhereUniqueInput!, data: DomainUpdateInput!): Domain
  updateDomains(data: [DomainUpdateArgs!]!): [Domain]
  deleteDomain(where: DomainWhereUniqueInput!): Domain
  deleteDomains(where: [DomainWhereUniqueInput!]!): [Domain]
  createMainDomain(data: MainDomainCreateInput!): MainDomain
  createMainDomains(data: [MainDomainCreateInput!]!): [MainDomain]
  updateMainDomain(where: MainDomainWhereUniqueInput!, data: MainDomainUpdateInput!): MainDomain
  updateMainDomains(data: [MainDomainUpdateArgs!]!): [MainDomain]
  deleteMainDomain(where: MainDomainWhereUniqueInput!): MainDomain
  deleteMainDomains(where: [MainDomainWhereUniqueInput!]!): [MainDomain]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Session!]
  session(where: SessionWhereUniqueInput!): Session
  sessionsCount(where: SessionWhereInput! = {}): Int
  packets(where: PacketWhereInput! = {}, orderBy: [PacketOrderByInput!]! = [], take: Int, skip: Int! = 0): [Packet!]
  packet(where: PacketWhereUniqueInput!): Packet
  packetsCount(where: PacketWhereInput! = {}): Int
  domains(where: DomainWhereInput! = {}, orderBy: [DomainOrderByInput!]! = [], take: Int, skip: Int! = 0): [Domain!]
  domain(where: DomainWhereUniqueInput!): Domain
  domainsCount(where: DomainWhereInput! = {}): Int
  mainDomains(where: MainDomainWhereInput! = {}, orderBy: [MainDomainOrderByInput!]! = [], take: Int, skip: Int! = 0): [MainDomain!]
  mainDomain(where: MainDomainWhereUniqueInput!): MainDomain
  mainDomainsCount(where: MainDomainWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
