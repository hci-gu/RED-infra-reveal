// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String  @id @default(uuid()) @postgresql.Uuid
  email    String  @unique @default("")
  password String
  admin    Boolean @default(false)
}

model Session {
  id                  String    @id @default(uuid()) @postgresql.Uuid
  name                String    @default("Session")
  start               DateTime
  end                 DateTime?
  from_Packet_session Packet[]  @relation("Packet_session")
}

model Packet {
  id            String   @id @default(uuid()) @postgresql.Uuid
  session       Session? @relation("Packet_session", fields: [sessionId], references: [id])
  sessionId     String?  @map("session") @postgresql.Uuid
  timestamp     DateTime @default(now())
  host          String   @default("")
  ip            String   @default("")
  protocol      String   @default("")
  method        String   @default("")
  accept        String   @default("")
  contentType   String   @default("")
  userId        String   @default("")
  lat           Float?
  lon           Float?
  clientLat     Float?
  clientLon     Float?
  country       String   @default("")
  region        String   @default("")
  city          String   @default("")
  userAgent     String   @default("")
  contentLength Float?
  responseTime  Float?

  @@index([sessionId])
}

model Domain {
  id                      String       @id @default(uuid()) @postgresql.Uuid
  name                    String       @unique @default("")
  hits                    Int?         @default(1)
  tags                    Tag[]        @relation("Domain_tags")
  from_MainDomain_domains MainDomain[] @relation("MainDomain_domains")
}

model MainDomain {
  id      String   @id @default(uuid()) @postgresql.Uuid
  name    String   @unique @default("")
  domains Domain[] @relation("MainDomain_domains")
}

model Tag {
  id               String    @id @default(uuid()) @postgresql.Uuid
  name             String    @default("")
  category         Category? @relation("Tag_category", fields: [categoryId], references: [id])
  categoryId       String?   @map("category") @postgresql.Uuid
  from_Domain_tags Domain[]  @relation("Domain_tags")

  @@index([categoryId])
}

model Category {
  id                String @id @default(uuid()) @postgresql.Uuid
  name              String @default("")
  from_Tag_category Tag[]  @relation("Tag_category")
}
